# pipeline settings
- pipeline: "Build & Deploy to Production"
  ref_name: "main"
  ref_type: "BRANCH"
  trigger_mode: "ON_EVERY_PUSH"
  fetch_all_refs: true

  # pipeline variables
  variables:
    - key: "PROJECT_SHORTNAME"
      value: ""
    - key: "PROJECT_URL"
      value: ""
    - key: "REMOTE_PROJECT_ROOT"
      value: ""
    - key: "REMOTE_SSH_HOST"
      value: ""
    - key: "REMOTE_SSH_USER"
      value: ""

  # pipeline actions
  actions:

    # STEP 1: build the frontend js/css
  - action: "Build the frontend js/css with vite:build"
    type: "BUILD"
    working_directory: "/buddy/$PROJECT_SHORTNAME/frontend"
    docker_image_name: "node"
    docker_image_tag: "lts"
    volume_mappings:
      - "/:/buddy/$PROJECT_SHORTNAME"
    execute_commands:
      - "npm ci && npm run build"

    # STEP 2: install php vendor files with composer
  - action: "Install Composer"
    type: "BUILD"
    working_directory: "/buddy/$PROJECT_SHORTNAME/craftcms"
    docker_image_name: "composer"
    docker_image_tag: "latest"
    volume_mappings:
      - "/:/buddy/$PROJECT_SHORTNAME"
    execute_commands:
      - "composer install --verbose --no-progress --no-scripts --optimize-autoloader --no-interaction"

    # STEP 3: rsync push files to host
  - action: "Rsync files to host"
    type: "RSYNC"
    local_path: "craftcms/"
    remote_path: "$REMOTE_PROJECT_ROOT/deploy-cache"
    login: "$REMOTE_SSH_USER"
    host: "$REMOTE_SSH_HOST"
    port: "22"
    authentication_mode: "WORKSPACE_KEY"
    archive: true
    delete_extra_files: true
    recursive: true
    compress: true

    # STEP 4: create an atomic deployment release on the server
  - action: "Prepare Atomic Deployment"
    type: "SSH_COMMAND"
    working_directory: "$REMOTE_PROJECT_ROOT"
    login: "$REMOTE_SSH_USER"
    host: "$REMOTE_SSH_HOST"
    port: "22"
    authentication_mode: "WORKSPACE_KEY"
    run_as_script: true
    shell: "BASH"
    commands:

        # make sure we have all the files & directories we might need (especially on first deployments)
      - "mkdir -p releases storage deploy-cache/migrations"
      - "[ ! -f '.env' ] && [ -f 'deploy-cache/.env.example' ] && cp deploy-cache/.env.example .env"

        # wipe existing release directory of this is *not* the first attempt deploying this commit
      - "[ -d \"releases/$BUDDY_EXECUTION_REVISION\" ] && [ \"$BUDDY_EXECUTION_REFRESH\" = \"true\" ] && rm -rf releases/$BUDDY_EXECUTION_REVISION;"

        # create the directory for this release and copy the contents of the deploy cache into it
      - "[ ! -d \"releases/$BUDDY_EXECUTION_REVISION\" ] && cp -dR deploy-cache releases/$BUDDY_EXECUTION_REVISION;"

        # create symlinks to persistent storage directory and .env file from inside the new release
      - "ln -nfs $REMOTE_PROJECT_ROOT/.env $REMOTE_PROJECT_ROOT/releases/$BUDDY_EXECUTION_REVISION"
      - "ln -nfs $REMOTE_PROJECT_ROOT/storage $REMOTE_PROJECT_ROOT/releases/$BUDDY_EXECUTION_REVISION"

        # set permissions on cpresources
      - "mkdir -p releases/$BUDDY_EXECUTION_REVISION/web/cpresources"
      - "chmod -R 0774 releases/$BUDDY_EXECUTION_REVISION/web/cpresources"

        # remove old releases
      - "cd releases && ls -t | tail -n +6 | xargs rm -rf"

    # STEP 5: make the new release live
  - action: "Make Release Live"
    type: "SSH_COMMAND"
    working_directory: "$REMOTE_PROJECT_ROOT"
    login: "$REMOTE_SSH_USER"
    host: "$REMOTE_SSH_HOST"
    port: "22"
    authentication_mode: "WORKSPACE_KEY"
    run_as_script: true
    shell: "BASH"
    commands:

        # make sure the current craft script is executable & run a database backup
      - "chmod a+x current/craft && ./current/craft db/backup"

        # swap `current` symlink to new release
      - "rm -f current && ln -s releases/$BUDDY_EXECUTION_REVISION current"

        # clear caches and run any pending migrations
      - "cd current && chmod a+x craft"
      - "./craft invalidate-tags/all --interactive=0"
      - "./craft clear-caches/all --interactive=0"
      - "./craft up --interactive=0"