{## Card Base   [Site Template]
{---------------------------------------------------------------------------------------}
    This is the base card template that all site cards extend from. It provides the
    basic structure and layout for all cards, along with a variety of common elements.

    Most card templates should inherit directly from this template.
{-------------------------------------------------------------------------------------##}
{% extends "_core/card" %}


{## Template Variables
{---------------------------------------------------------------------------------------}
    Generally not a good idea to effect template variables outside of a {% block %} or
    {% macro %} context when inside a template that extends (and is extended by) other
    templates.

    Below is what the variables should be when passed to this template. Use this code
    inside {% block %} contexts to validate incoming data.
{---------------------------------------------------------------------------------------}
    {%- set card = card ?? null is iterable ? card : {} -%}
    {%- set settings = settings ?? null is iterable ? settings : {} -%}
{-------------------------------------------------------------------------------------##}


{## Override Example
{---------------------------------------------------------------------------------------}
    Change <h3> headlines to <div class="like-h3"> elements
{-------------------------------------------------------------------------------------##}
{% block card__headline -%}
    {{ parent() | retconChange( 'h3', 'div' ) | attr({ class: 'like-h3 my-0' }) }}
{% endblock %}



{## If Handle Card Action = 'None'
{---------------------------------------------------------------------------------------}
    If `settings.action` equals 'none' we will remove any embedded rich text links
    or buttons from the CKeditor `summary` field.
{-------------------------------------------------------------------------------------##}
{# {% block card__summary -%}
    {%- set settings = settings ?? null is iterable ? settings : {} -%}
    {% set action   = settings.action ??? 'autolink' %}
    {{- action ??? null == 'none'
        ? parent() | retconRemove( ['a','button'] ) | raw
        : parent() -}}
{%- endblock %} #}



{## Auto-Grid Iterators
{-------------------------------------------------------------------------------------##}
{% macro iterator__autogrid( items, settings ) -%}
{%- if items ??? null and items is iterable -%}

    {%- set settings = settings ?? null is iterable ? settings : {} -%}
    {%- set settings = { cardname: 'default' } | merge( settings ) -%}

    {%- set class = "w-full grid grid-cols-1 gap-4 lg:gap-8 xl:gap-16 " -%}
    {%- set count = items | length %}

    {%- if count == 1 -%}
        {%- set class = class ~ "" -%}
    {%- elseif count == 2 -%}
        {%- set class = class ~ "@sm:grid-cols-2" -%}
    {%- elseif count == 3 -%}
        {%- set class = class ~ "@3xl:grid-cols-3" -%}
    {%- elseif count == 4 -%}
        {%- set class = class ~ "@sm:grid-cols-2 @4xl:grid-cols-4" -%}
    {%- elseif count == 5 -%}
        {%- set class = class ~ "@sm:grid-cols-2 @3xl:grid-cols-3" -%}
    {%- elseif count == 6 -%}
        {%- set class = class ~ "@sm:grid-cols-2 @3xl:grid-cols-3" -%}
    {%- elseif count == 7 -%}
        {%- set class = class ~ "@sm:grid-cols-2 @4xl:grid-cols-4" -%}
    {%- elseif count == 8 -%}
        {%- set class = class ~ "@xs:grid-cols-2 @md:grid-cols-3 @2xl:grid-cols-4" -%}
    {%- elseif count == 9 -%}
        {%- set class = class ~ "@sm:grid-cols-2 @3xl:grid-cols-3 @6xl:grid-cols-5" -%}
    {%- elseif count == 10 -%}
        {%- set class = class ~ "@xs:grid-cols-2 @md:grid-cols-3 @2xl:grid-cols-4 @6xl:grid-cols-5" -%}
    {%- elseif count == 11 -%}
        {%- set class = class ~ "@sm:grid-cols-2 @3xl:grid-cols-3 @4xl:grid-cols-4 @6xl:grid-cols-6" -%}
    {%- elseif count >= 12 -%}
        {%- set class = class ~ "@sm:grid-cols-2 @3xl:grid-cols-3 @4xl:grid-cols-4 @6xl:grid-cols-6" -%}
    {%- endif -%}

    {%- import "_core" as assemble -%}
    {%- set items = items | map( item => assemble.card( settings.cardname, item, settings ) ) -%}
    {{- tag( 'div', { html: items | join(''), class: class, 'data-grid': 'autogrid' } ) -}}
{%- endif %}{% endmacro %}