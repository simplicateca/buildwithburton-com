{## [Core] Accordion Component
{---------------------------------------------------------------------------------------}
  ✔ Built using Alpine JS & Tailwind
  ✔ Accessibility (a11y) compliant
  ✔ Easy to extend and customize
{-------------------------------------------------------------------------------------##}
{% extends template_from_string('{% block accordion__skeleton "" %}') %}


{% set firstopen = firstopen ??? false %}

{## Usage
{---------------------------------------------------------------------------------------}

    The easiest way to use the accordion component is to call the template via
    {% embed %}, passing in the items you want to display in the accordion.

    You will then need to override the `panel__title` and `panel__content` blocks
    within your {% embed %} tag to define the contents of each accordion item.

    The following example shows the most common way to use the accordion to output
    card content for a list of items.

    {% embed ['_site/accordion','_core/accordion'] with {
        items     : [],
        firstopen : false,

        settings  : {},
        cardname : 'default',
    } %}
        {% block panel__title CardBase( item, settings )['label'] %}

        {% block panel__content %}
            {%- import "_core" as assemble -%}
            {{- assemble.card( cardname, item, settings ) -}}
        {% endblock %}
    {% endembed %}


{## Configuration
{---------------------------------------------------------------------------------------}

    Only two named parameters are recognized by the component:

      `items`       array (required)
                    items to loop through within the accordion

      `firstopen`   boolean (optional)
                    determines if the first item should start open

    Additional parameters may be passed into the template (per the example above),
    but only the above two are used by the component.

    Additional changes can be made to the component by overriding some of the block
    definitions listed below that are responsible for styling various parts of the
    accordion.

    If you require additional customization, the base component can be copied and
    places in the `_site` folder to be modified as needed.

{-------------------------------------------------------------------------------------##}
{% block accordion__class   "w-full max-w-5xl space-y-4" %}

{% block panel__titleclass  "like-h4 !mb-0 text-left" %}
{% block panel__titletag    "div" %}
{% block panel__buttonclass "flex p-6 pb-0 w-full h-full items-center justify-between" %}

{% block panel__openclass   "shadow bg-theme-tint2 transition" %}
{% block panel__textclass   "p-6" %}

{% block icon__close svg( '@webroot/static/svg/minus.svg') | attr({
    class: 'fill-current h-10 w-10'
}) %}

{% block icon__open svg( '@webroot/static/svg/plus.svg') | attr({
    class: 'fill-current h-10 w-10'
}) %}
{##-----------------------------------------------------------------------------------##}



{## Base Element
{-------------------------------------------------------------------------------------##}
{% block accordion__skeleton block('assemble') -%}

{% block assemble -%}
    {%- set items  = items and items is iterable ? items : [] -%}
    {%- set active = ( firstopen ?? false ) ? 1 : 0 -%}
    {%- if items | length -%}
        <div
            class="{{ block('accordion__class') }}"
            x-data="{
                active: '{{active}}',

                toggle(index) {
                    let el = document.getElementById(`panel__${index}`)
                    if( el ) {
                        let panel = Alpine.$data(el)
                        if( this.isopen(index) ) {
                            panel.opening = false
                            this.active = ''
                        } else {
                            this.active = index
                            panel.opening = true
                            setTimeout(() => { panel.opening = false; }, 100 );
                        }
                    }
                },

                isopen(index) {
                    return ( this.active === index );
                },

                handleleave(index) {
                    let el = document.getElementById(`panel__${index}`)
                    let header = document.getElementById(`header__${index}`)
                    if( el && header ) {
                        let panel = Alpine.$data(el)
                        if( panel.opening ) {
                            panel.opening = false
                            setTimeout(() => {
                                header.scrollIntoView({ behavior: 'smooth' })
                            }, 100 );
                        }
                    }
                }
            }"

        >{% for item in items %}{{ block( 'panel' ) }}{% endfor %}</div>
    {%- endif -%}
{%- endblock %}


{## Component Parts
{-------------------------------------------------------------------------------------##}
{% block panel__content "" %}
{% block panel__title   "Tab #{loop.index}" %}

{% block panel -%}
    <div
        x-cloak
        id="panel__{{loop.index}}"
        x-data="{
            id: '{{loop.index}}',
            opening: false
        }"
        :class="isopen(id) ? '{{ block( 'panel__openclass' ) }}' : ''"
        role="region"
    >
        <div
            id="header__{{loop.index}}"
            x-intersect:leave="handleleave(id)"
            class="h-full mb-0 -scroll-mt-4"
        >{{
            tag( 'button', {
                html : block( 'button' ),
                class: block( 'panel__buttonclass' ),
                'x-on:click'   : "toggle(id)",
                'aria-expanded': "isopen(id)",
            } )
        }}</div>

        <div x-show="isopen(id)" x-collapse.duration.100ms>
            <div class="{{ block( 'panel__textclass' ) }}">{{ block('panel__content') }}</div>
        </div>
    </div>
{%- endblock %}

{% block button -%}
    {%- set titletag = titletag ?? null is iterable ? titletag : {} %}
    {%- set titletag = titletag is string ? { html: titletag } : titletag %}
    {%- set titletag = {
        class : settings.panel__titleclass ?? block('panel__titleclass') ?? "",
        html  : block('panel__title')
    } | merge( titletag ) -%}

    {{ tag( block('panel__titletag'), titletag ) }}

    <span x-show="isopen(id)"  aria-hidden="true" class="ml-4">{{ block( 'icon__close' ) }}</span>
    <span x-show="!isopen(id)" aria-hidden="true" class="ml-4">{{ block( 'icon__open'  ) }}</span>
{%- endblock %}