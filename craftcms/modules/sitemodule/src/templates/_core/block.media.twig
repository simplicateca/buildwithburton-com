{## [Core Block] Media
{---------------------------------------------------------------------------------------}
  > http://localhost:8000/sitehub/blocks/media
{-------------------------------------------------------------------------------------##}
{%- extends [ "_site/block", "_core/block" ] -%}


{## Template Variables
{---------------------------------------------------------------------------------------}
    Reminder about Twig Variable Scope: Don't change or set default values on `block`
    or `settings` both inside AND outside of inheritable {% block %} scope. Pick one!
{-------------------------------------------------------------------------------------##}
{%- set block = block ?? {} -%}

{%- set settings = block.settings ??? null -%}
{%- set settings = settings ?? null is iterable ? settings : {} -%}


{## Zone 2 Content / Variant Routing
{-------------------------------------------------------------------------------------##}
{% block block__zone2 %}
    {%- set settings = {
        variant   : null,
        limit     : 24,
        iterator  : 'single',
        medialayer: 'default',
    } | merge( settings ) -%}

    {%- set mediaitems = [] -%}

    {## Item Source: Media Field
    {-----------------------------------------------------------------------------##}
    {%- set mediaitems = collect( block.media ?? null ).all() -%}

    {## Item Source: External Embed via URL
    {-------------------------------------------------------------------------------}
        MediaBase() documentation coming. But basically it's oembed.
    {-----------------------------------------------------------------------------##}
    {%- set embeds = collect( block.embeds ?? null ).all() -%}
    {%- if embeds -%}
        {% set mediaitems = [] %}
        {%- for item in embeds -%}
            {%- set url = item.website ??? item.url ??? null -%}
            {%- if url -%}
                {%- set oembed = MediaBase( url ) -%}
                {## TODO: Add items.images to eager loading ##}
                {%- set mediaitems = mediaitems|merge([{
                    _media   : item,
                    url      : url,
                    kind     : 'external',
                    oembed   : oembed,
                    images   : item.images.one() ? item.images.all() : [],
                    summary  : item.summary  ??? oembed.summary ??? null,
                    headline : item.headline ??? oembed.title   ??? null,
                }]) -%}
            {%- endif -%}
        {%- endfor -%}
    {%- endif -%}



    {## Item Source: Collection
    {-------------------------------------------------------------------------------}
        When loading from a Collection, using `CollectionResults()` is easier than
        rewriting the query inline each time you need it -- or trying to implement
        it as an inline Twig macro.

        CollectionResults() is a PHP Twig macro that returns a query object based
        on the search params passed into it. It is editable here:

        -> `craftcms/modules/sitemodule/src/twigextensions/CollectionBaseTwig.php`
    {-----------------------------------------------------------------------------##}
    {%- if block.collections ?? null and not mediaitems | length -%}
        {%- set collections = collect( block.collections ?? [] ).all() -%}
        {%- set mediaitems = CollectionResults( collections, {
            limit : settings.limit,
            slug  : request.getParam('f') ?? null,
            static: 'media'
        } ) -%}
    {%- endif -%}


    {## Named Variant Block or Standard Layout
    {---------------------------------------------------------------------------------##}
    {%- set blockname = "media__#{settings.variant}" -%}
    {{- ( block( blockname ) is defined )
        ? block( blockname )
        : block( 'media__fallback' ) -}}
{% endblock %}



{## Fallback Renderer for Media Items
{-------------------------------------------------------------------------------------##}
{% block media__fallback %}
    {%- import "_core" as assemble -%}
    {{- assemble.media( settings.iterator, mediaitems, settings ) -}}
{% endblock %}



{## Media Third Party Embed
{-------------------------------------------------------------------------------------##}
{% block media__code %}
    {%- set settings = settings ??? block.settings ??? null -%}
    {%- set settings = settings ?? null is iterable ? settings : {} -%}

    {{- block.html | retconOnly('iframe') | retconAttr( 'iframe', {
        class : 'aspect-video',
        width : false,
        height: false
    }) -}}
{% endblock %}
