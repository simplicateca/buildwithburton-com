{## Block Core Template
{-------------------------------------------------------------------------------------##}
{%- extends template_from_string('{% block block_skeleton "" %}') -%}

{%- import "_core" as assemble -%}


{## Render HTML
{---------------------------------------------------------------------------------------}
    Generates the html structure for the entire block.
{-------------------------------------------------------------------------------------##}
{% block block_skeleton -%}

    {## Universal Block Defaults
    {-------------------------------------------------------------------------------------##}
    {%- set block = block ?? null -%}

    {%- set settings = block.settings ?? settings ?? null -%}
    {%- set settings = settings is iterable ? settings : {} -%}

    {%- set settings = {
        include__before: null,
        include__after : null,
        container      : 'default',
        microlayout    : 'default'
    } | merge( settings ) -%}

    {% if loop ?? null %}
        {%- set settings = {
            loop__first : loop.first ,
            loop__index : loop.index ,
            loop__index0: loop.index0,
            loop__last  : loop.last  ,
        } | merge( settings ) -%}
    {% endif %}

    {# Spacer Before / Between Block #}
    {%- block before assemble.separator( settings.include__before, block, settings ) -%}

    {# Open Theme #}
    {%- block theme -%}
    {%- block theme__open assemble.blockpart( 'theme__open', block, settings ) -%}

        {# Open Block Content Area #}
        {%- block section -%}
        {%- block open assemble.blockpart( 'block__open', block, settings ) -%}

            {# Actual Block Content #}
            {%- block content block('block__html') -%}

        {# Close Block Content Area #}
        {%- block close assemble.blockpart( 'block__close', block, settings ) -%}
        {%- endblock section -%}

    {# Close Theme #}
    {%- block theme__close assemble.blockpart( 'theme__close', block, settings ) -%}
    {%- endblock theme -%}

    {# Spacer After / Between Block #}
    {%- block after assemble.separator( settings.include__after, block, settings ) -%}
{%- endblock %}



{## Block HTML
{---------------------------------------------------------------------------------------}
    It's possible to add an `html` attribute to an otherwise empty hash and hand it off
    to the Builder assembly (alone or spliced into a list of standard blocks).

    If the current Block has the `html` attribute, we'll output it wrapped in a.
    container. Otherwise, we'll generate the content using the microlayout assembly.

    Sample of a Raw HTML Block:
{---------------------------------------------------------------------------------------}
    {%- set blocks = entry.bodyBuilder.all() | merge([{ html: "Your Content" }]) -%}
    {%- import "_core" as assemble -%}
    {{- assemble.builder( 'default', blocks, settings ) -}}
{-------------------------------------------------------------------------------------##}
{% block block__html -%}
    {%- import "_core" as assemble -%}
    {{- ( block.html ?? null )
        ? assemble.container( settings.container, block.html )
        : block('block__microlayout') -}}
{%- endblock %}


{## Assemble Block Content with a Microlayout
{-------------------------------------------------------------------------------------##}
{% block block__microlayout %}
    {% set content = {
        zone1 : block('block__zone1'),
        zone2 : block('block__zone2'),
        header: block('block__header'),
        footer: block('block__footer'),
    } %}

    {{- assemble.microlayout( settings.microlayout ??? 'default', content, settings ) -}}
{% endblock %}



{## Default Zone 1 (Text) Content
{-------------------------------------------------------------------------------------##}
{% block block__zone1 assemble.text(
    settings.textlayer ??? 'default',
    block.text ??? null,
    settings ??? null
) %}



{## Default Blocks
{-------------------------------------------------------------------------------------##}
{% block block__zone2  "" %}
{% block block__header "" %}
{% block block__footer "" %}



{## Builder Macros
{-------------------------------------------------------------------------------------##}
{% macro builder__fallback( blocks, settings ) -%}

    {%- set blocks   = blocks   ??? null and blocks   is iterable ? blocks   : [] -%}
    {%- set settings = settings ?? null is iterable ? settings : {} -%}


    {## Find Block Owner Entry
    {-----------------------------------------------------------------------------------}
        Try to find if any of the blocks are actual Matrix Blocks that are owned by
        a page. If so, we can use that entry to set the section, entryid, entryurl, etc.

        The only time this won't work is if the blocks are all manual html blocks.
        If that's the case, its probably worth setting an owner object along with the
        first block or just using a differnt builder macro altogether.
    {---------------------------------------------------------------------------------##}
    {## TODO: Use collect() / firstWhere() instead of a loop ##}
    {%- set owner = null -%}
    {%- for b in blocks -%}
        {%- set owner = owner is not null and b.owner ??? null ? b.owner : owner -%}
    {%- endfor -%}


    {## Default Block `settings`
    {-----------------------------------------------------------------------------------}
        The `settings` object gets passed along with every Twig embed, include, or macro
        related to rendering the content for the block. Typically through the one of
        the Assemble macros.

     ## Template Lookup Path
    {-----------------------------------------------------------------------------------}
        The `blockpath` object is a list of possible paths that the block template
        could be located at, with placeholders that will be replaced with the actual
        values for each block (see the `replace()` filter within the loop below).

        Any placeholder used in the `blockpath` need to have corresponding replacement
        entries in the `replace()` filter within the loop below. And as such, that
        probably means that your placeholder values should be present in the blocks'
        `settings` object.
    {---------------------------------------------------------------------------------##}
    {%- set settings = {
        theme    : 'base',
        builder  : 'fallback',
        container: 'default',
        section  : owner.section.handle ?? owner.section ?? null,
        entrytype: owner.type.handle    ?? owner.type    ?? null,
        entryid  : owner.id  ?? null,
        entryurl : owner.url ?? null,
        blockpath: [
            "_site/block.%blocktype%.%variant%",
            "_core/block.%blocktype%.%variant%",
            "_site/block.%blocktype%",
            "_core/block.%blocktype%",
            "_site/block",
            "_core/block"
        ],
    } | merge( settings ) -%}


    {## BuilderBase() Macro
    {-----------------------------------------------------------------------------------}
        BuilderBase() is custom Twig macro used to handle a couple of tasks that are
        difficult to do well in Twig alone. As part of the SiteModule, this macro is
        autoloaded and can be called from any Twig template.

        You may view/edit the macro and read more about why it's written in PHP here:

     -> `craftcms/modules/sitemodule/src/twigextensions/BuilderBaseTwig.php`
    {---------------------------------------------------------------------------------##}
    {%- for block in BuilderBase( blocks, settings ) -%}

        {%- set path = settings.blockpath | map( p => p|replace({
            '%theme%'    : block.settings.theme     ??? null,
            '%layout%'   : block.settings.layout    ??? null,
            '%section%'  : block.settings.section   ??? null,
            '%builder%'  : block.settings.builder   ??? null,
            '%blocktype%': block.settings.blocktype ??? null,
            '%entrytype%': block.settings.entrytype ??? null,
            '%variant%'  : block.settings.variant   ??? null,
        }) ) -%}

        {{- include( path, { block:block, settings:block.settings, loop:loop }, withContext = false ) -}}

    {%- endfor -%}
{% endmacro %}



{## Theme Open / Close
{---------------------------------------------------------------------------------------}

{-------------------------------------------------------------------------------------##}
{% macro theme__open( block, settings = null ) -%}
    {%- set settings = settings ?? null is iterable ? settings : {} -%}


    {%- set tagname   = settings.theme__tag ??? "div" -%}
    {%- set tagclass  = settings.theme__class ?? "relative" -%}

    {%- set basetheme = settings.basetheme ??? settings.theme ??? 'base' -%}
    {%- set coverage  = ( settings.coverage is not defined or settings.coverage == 'full' ) ? 'full' : null -%}
    {%- set opening   = ( settings._prev is not defined or not settings._prev.match__theme ) -%}

    {%- set dataset   = { scrolltrigger: true, theme: basetheme } -%}
    {%- set dataset   = coverage ? dataset | merge({ coverage: coverage }) -%}

    {%- if opening -%}
        {{ raw( "<#{tagname} " ~  attr({ class: tagclass, data: dataset }) ~ ">" ) }}

        {## Block Background Canvas
        {-------------------------------------------------------------------------------}
            Having the background be applied to an absolute positioned "canvas" div
            instead of the block <div> itself allows for additional flexibility for
            animations & transitions, etc.

            It also makes it easier to change its parent within the block.

            This is canvas element is added if there is no `coverage` setting -OR- if
            the `coverage` setting is set to 'full' for full bleed background coverage.

            Or this entire thing could be removed and the background could be applied
            directly to any elements with the `data-theme` attribute via css.

         -> frontend/css/app.css
        {-----------------------------------------------------------------------------##}
        {%- if coverage == 'full' -%}<div data-canvas="full"></div>{%- endif -%}
    {%- endif -%}

    {## Spacer Above?
    -------------------------------------------------------------------------------- ##}
    {%- set spacerabove = settings.spacerabove ?? 'normal' -%}
    {%- set spacerabove = ( settings.spacerfirst ??? null ) and ( settings.loop__first ??? null )
        ? settings.spacerfirst
        : spacerabove -%}

    {%- if spacerabove -%}
        {%- import "_core" as assemble -%}
        {{- assemble.separator( spacerabove, block, settings ) -}}
    {%- endif -%}

{% endmacro %}



{% macro theme__close( block, settings ) %}
    {%- set settings = settings ?? null is iterable ? settings : {} -%}

    {## Decide if we're closing the Theme (Basically the reverse of Open Theme) ##}
    {%- set closetheme = ( settings._next is not defined or not settings._next.match__theme ) -%}
    {%- if closetheme -%}
        {% import "_core" as assemble %}
        {{ assemble.separator( settings.spacerbelow ?? 'normal', block, settings | merge({ _closing: true }) ) }}
        {%- set tagname = settings.theme__tag ??? "div" -%}
        </{{tagname}}>
    {%- endif -%}
{% endmacro %}




{## Block Content Open / Close
{---------------------------------------------------------------------------------------}

{-------------------------------------------------------------------------------------##}
{% macro block__open( block, settings ) -%}
    {%- set tagname = settings.block__tag ??? "section" -%}
    {{ raw( "<" ~ tagname ~ " " ~ attr({
        class: settings.block__class ?? "relative z-20",
        data: {
            block   : settings.blocktype ??? 'manual',
            bodycopy: true,
        } } ) ~ ">" ) }}
{%- endmacro %}


{% macro block__close( block, settings ) -%}
    {%- set tagname = settings.block__tag ??? "section" -%}
    {{- raw( "</#{tagname}>" ) -}}
{%- endmacro %}
{## --------------------------------------------------------------------------------- ##}





{## Reusable Content (Fragments & Bits)
{---------------------------------------------------------------------------------------}
    Coming soon...
{-------------------------------------------------------------------------------------##}
{# {% macro fragment( query = null, builder = 'content', settings = {} ) %}
    {%- if query.id ??? query.slug ??? query.preset ??? null -%}
        {% set fragment = craft.entries({section:"reusable"}|merge( query )).one() ??? null %}
        {% if fragment %}

        {% endif %}
    {%- endif -%}
{% endmacro %} #}
{## --------------------------------------------------------------------------------- ##}