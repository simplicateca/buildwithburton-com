{% extends template_from_string('{% block assemble "" %}') %}

{## Website Assemble!
{---------------------------------------------------------------------------------------}
    Assemble streamlines the process of rendering a variety of common elements by
    storing them all together in a systematized format of templates & macros.

    It offers a modular architecture, intuitive macros, and fallback mechanisms to
    facilitate efficient integration and customization.

    Key Features:
    - Modular architecture enables easy customization.
    - Intuitive macros and file structure ensure seamless integration.
    - Fallback mechanisms ensure smooth operation in case of missing files or macros.


{## File and Macro Naming Conventions
{---------------------------------------------------------------------------------------}
    Within the Assemble file, macros are structured to look for functionality within
    specific file paths.

  > templates/_core
    Hosts default versions of templates and macros, providing structural functionality.


  > templates/_site/
    Contains site-specific or customized versions of files, macros, or templates,
    allowing for selective customization.

{## Macro Naming
{---------------------------------------------------------------------------------------}
  - Each macro within the Assemble file is designed to search for its functionality
    in predefined file paths and/or name prefix.

  - For instance, the `assemble.images` function searches for functionality within
    ["_site/image", "_core/image"]`, while the `assemble.block` function searches in
    ["_site/block", "_core/block"]

  - Developers can place customized versions of these files in the `_site` folder to
    override default behavior defined in the `_core` folder.

    This approach enables granular customization of macros based on specific
    functionalities, while maintaining fallback mechanisms to ensure consistent
    behavior across different components of the website.
{-------------------------------------------------------------------------------------##}


{## Text Layer / Typography Adjustments
{---------------------------------------------------------------------------------------}
    Looks for a macro named after the value of `textlayer` argument within a file in
    the path below. If no match is found, it will fallback to use the `default()` macro.

    Text Layer macros can be found in:
  > templates/_site/text.twig
  > templates/_core/text.twig
{-------------------------------------------------------------------------------------##}
{% macro text( textlayer, text, settings ) -%}
    {{- raw( _self._macro( 'text', textlayer, text, settings ) ) -}}
{%- endmacro -%}



{## Image Frames & Iterators
{---------------------------------------------------------------------------------------}
    Looks for a file named after the value of `imagelayer` argument in the path below.
    `_site/image.<imagelayer>.twig`

    If not file is found, look for a macro named after the value of `imagelayer` argument
    within a file in the path below. If no match is found, it will fallback to use the
    `default()` macro.

    Image Layer macros can be found in:
  > templates/_site/image.twig
  > templates/_core/image.twig
{-------------------------------------------------------------------------------------##}
{% macro images( iterator, images, settings ) %}
    {%- set iterator = ( iterator ??? null and iterator starts with 'iterator__' )
        ? iterator | replace({'iterator__':''})
        : iterator -%}
    {%- set html = include( "_site/image.#{iterator}", { images: images, settings: settings }, ignoreMissing = true ) -%}
    {%- set html = html ? html : _self._macro( 'image', "iterator__#{iterator}", images, settings ) -%}
    {{- html ? raw( html ) -}}
{% endmacro %}


{% macro imagelayer( imagelayer, image, settings ) -%}
    {%- set html = include( "_site/imagelayer.#{imagelayer}", { image: image, settings: settings }, ignoreMissing = true ) -%}
    {%- set html = html ? html : _self._macro( 'image', imagelayer ??? 'default', image, settings ) -%}
    {{- html ? raw( html ) -}}
{%- endmacro %}



{## Media Element Frames & Iterators (<video>,<audio>,etc)
{---------------------------------------------------------------------------------------}
    Looks for a macro named after the value of `medialayer` argument within a file in
    the path below. If no match is found, it will fallback to use the `default()` macro.

    Media Layer macros can be found in:
  > templates/_site/media.twig
  > templates/_core/media.twig
{-------------------------------------------------------------------------------------##}
{% macro media( iterator, mediaitems, settings ) -%}
    {%- set iterator = ( iterator ??? null and iterator starts with 'iterator__' )
        ? iterator | replace({'iterator__':''})
        : iterator -%}
    {%- set html = include( "_site/media.#{iterator}", { mediaitems: mediaitems, settings: settings }, ignoreMissing = true ) -%}
    {%- set html = html ? html : _self._macro( 'media', "iterator__#{iterator}", mediaitems, settings ) -%}
    {{- html ? raw( html ) -}}
{%- endmacro %}


{% macro medialayer( medialayer, media, settings ) -%}
    {%- set html = include( "_site/medialayer.#{medialayer}", { media: media, settings: settings }, ignoreMissing = true ) -%}
    {%- set html = html ? html : _self._macro( 'media', medialayer ??? 'default', media, settings ) -%}
    {{- html ? raw( html ) -}}
{%- endmacro %}


{## Card Iterators
{-------------------------------------------iterator--------------------------------------------}
    Checks to see if a template file exists with the following name:

  > templates/_site/deck.<iterator>.twig

    If no iterator specific template is found, look for macros named
    `iterator__<iterator>` in this file order:

  > templates/_site/card.twig
  > templates/_core/card.twig

    If no match is found, use `iterator__fallback()` in `_core/card.twig`

{-------------------------------------------------------------------------------------##}
{% macro deck( iterator, items, settings ) -%}
    {%- set iterator = ( iterator ??? null and iterator starts with 'iterator__' )
        ? iterator | replace({'iterator__':''})
        : iterator -%}
    {%- set html = include( "_site/deck.#{iterator}", { items: items, settings: settings }, ignoreMissing = true ) -%}
    {%- set html = html ? html : _self._macro( 'card:iterator', iterator, items, settings ) -%}
    {{- html ? raw( html ) -}}
{%- endmacro %}


{## Card Rendering Macro
{---------------------------------------------------------------------------------------}
    Rendering cards is a bit more complex than other elements because of the need to
    maintain a consistent, but flexible interface across content types.

    To achieve this, we've used a couple of different strategies:

    - Input Field Name Standardization
    - Template Naming & Inheritence Chains
    - CaseBase() Custom Twig Function
    - Content Specific Card Factories
{-------------------------------------------------------------------------------------##}
{% macro card( cardname, content, settings = null ) -%}
{%- if content and cardname -%}

    {## CardBase()
    {-----------------------------------------------------------------------------------}
        CardBase() is a relatively simple Twig macro used to define a consistent data
        structure for card objects. As part of the SiteModule, this macro is autoloaded
        and can be called from any Twig template.

        You may view/edit the macro and read more about why it's written in PHP here:
      > craftcms/modules/sitemodule/src/twigextensions/CardBaseTwig.php
    {---------------------------------------------------------------------------------##}
    {% set card = CardBase( content, settings ) %}


    {## Content Specific Card Factories
    {-----------------------------------------------------------------------------------}
        Card Factory can monitor and adjust how a specific content type will render
        regardless of the card being used.

        Card Factory template files end in `._card.twig` and are named using the
        `section` and (optionally) `type` handles of the content they represent.

        `_site/<section>.<entrytype>._card.twig`
        `_site/<section>._card.twig`
        `_site/articles.news._card.twig`
        `_site/articles._card.twig`
    {---------------------------------------------------------------------------------##}
    {%- set factorypath = [
        "_site/#{card.section}.#{card.type}._card",
        "_site/#{card.section}._card"
    ] -%}


    {## Content Specific Card Variants
    {-----------------------------------------------------------------------------------}
        Slightly different from Card Factories, which allow you to change the aspect of
        any card being rendered for a specific content type, Card Variants are used to
        adjust the layout of a single card based on the content it's rendering.

        `_site/card.summary.articles.twig`
        `_site/card.spotlight.articles.blog.twig`
    {---------------------------------------------------------------------------------##}
    {%- set cardpath = [
        "_site/card.#{cardname}.#{card.section}.#{card.type}",
        "_site/card.#{cardname}.#{card.section}",
        "_site/card.#{cardname}",
        "_site/card",
        "_core/card"
    ] -%}

    {## Check if the provided `cardname` is a file path or just a named card ##}
    {%- set ispath   = ( cardname ends with '.twig' or '/' in cardname ) -%}
    {%- set cardpath = ( ispath ) ? [cardname] : cardpath -%}

    {{- include( factorypath | merge(cardpath), {
        card: card,
        path: cardpath,
        settings: settings
    }, withContext = false ) -}}

{%- endif %}{%- endmacro %}




{## Block Builders
{---------------------------------------------------------------------------------------}
    Looks for a file named after the value of `builder` argument in the path below.
  > templates/_site/builder.<builder>.twig

    If not file is found, look for a macro named after the value of `builder` argument
    with the prefix `builder__` within a file in the path below. If no match is found,
    it will fallback to use the `builder__default()` macro.

    Block Builder macros have the `builder__` prefix and can be found in:
  > templates/_site/block.twig
  > templates/_core/block.twig
{-------------------------------------------------------------------------------------##}
{% macro builder( builder, items, settings ) -%}
    {%- set html = include( "_site/builder.#{builder}", { items: items, settings: settings }, ignoreMissing = true ) -%}
    {%- set html = html ? html : _self._macro( 'block:builder', builder, items, settings ) -%}
    {{- html ? raw( html ) -}}
{% endmacro %}



{## Block Parts
{---------------------------------------------------------------------------------------}
    Handles rendering of the parts of a block that are not the main content.
{-------------------------------------------------------------------------------------##}
{% macro blockpart( part, block, settings ) -%}
    {{- raw( _self._macro( 'block', part, block, settings ) ) -}}
{%- endmacro %}



{## Layout Part Macros
{------------------------------------------------------------------------------------ ##
    Microlayouts, Containers, Grids, Spacers, etc.

  > templates/_site/layout.twig
  > templates/_core/layout.twig
{-------------------------------------------------------------------------------------##}
{% macro layout( part, element, settings ) -%}
    {{- raw( _self._macro( 'layouts', part, element, settings ) ) -}}
{%- endmacro %}


{## Layout Part: Microlayouts
{-------------------------------------------------------------------------------------##}
{% macro microlayout( microlayout, content, settings = null ) -%}
{%- if content is iterable -%}
    {%- set content = {
        zone1 : content.zone1  is defined ? content.zone1  | trim : null,
        zone2 : content.zone2  is defined ? content.zone2  | trim : null,
        header: content.header is defined ? content.header | trim : null,
        footer: content.footer is defined ? content.footer | trim : null,
    } -%}
    {%- set settings = settings ?? null is iterable ? settings : {} -%}
    {%- set settings = settings | merge({ microlayout: microlayout }) -%}
    {{- raw( _self._macro( 'layouts:microlayout', microlayout, content, settings ) ) -}}
{%- endif %}{% endmacro %}


{## Layout Part: Containers
{-------------------------------------------------------------------------------------##}
{% macro container( container, content, settings ) -%}
    {{- content ? raw( _self._macro( 'layouts:container', container, content, settings )) -}}
{%- endmacro %}

{% macro container__open( container, settings ) -%}
    {% set break = '####################'%}
    {% set parts = _self.container( container, break, settings ) | split( break ) %}
    {{- parts[0] ? raw( parts[0] | trim ) -}}
{%- endmacro %}

{% macro container__close( container, settings ) -%}
    {% set break = '####################' %}
    {% set parts = _self.container( container, break, settings ) | split( break ) %}
    {{- parts[1] ? raw( parts[1] | trim ) -}}
{%- endmacro %}


{## Layout Part: Grids
{-------------------------------------------------------------------------------------##}
{% macro gridlayout( grid, content, settings = null ) -%}
    {{- content ? raw( _self._macro( 'layouts:grid', grid, content, settings )) -}}
{%- endmacro %}


{## Layout Parts: Spacers and Dividers
{-------------------------------------------------------------------------------------##}
{% macro separator( spacer, block, settings ) -%}
    {{- spacer ? _self._macro( 'layouts:separator', spacer, block, settings ) -}}
{%- endmacro %}
{##-----------------------------------------------------------------------------------##}



{## Search Parts
{---------------------------------------------------------------------------------------}
    Looks for a macro named after the value of `partname` argument within a file in
    the path below. If no match is found, it will render *nothing*.

    Search Part macros can be found in:
  > templates/_site/search.twig
  > templates/_core/search.twig
{-------------------------------------------------------------------------------------##}
{% macro searchpart( partname = null, params = null, settings = {} ) -%}
    {{- raw( _self._macro( 'search', partname, params, settings ) ) -}}
{%- endmacro %}



{## Account Parts
{---------------------------------------------------------------------------------------}
    Looks for a macro named after the value of `partname` argument within a file in
    the path below. If no match is found, it will render *nothing*.

    Account Part macros can be found in:
  > templates/_site/account.twig
  > templates/_core/account.twig
{-------------------------------------------------------------------------------------##}
{% macro accountpart( partname = null, params = null, settings = {} ) -%}
    {{- raw( _self._macro( 'account', partname, params, settings ) ) -}}
{%- endmacro %}



{## Menus
{---------------------------------------------------------------------------------------}
    Look for a file named after the value of `menu` argument (typically the menu handle),
    within the path below:

  > templates/_site/menu.<menu>.twig
  > templates/_core/menu.<menu>.twig

    If not file is found, look for a macro named after the value of `menu` argument
    with the prefix `menu__` within a file in the path below. If no match is found,
    it will fallback to use the `menu__default()` macro in _core/menu.twig.
{-------------------------------------------------------------------------------------##}
{% macro menu( menuname = null, entry = null, settings = {} ) %}
    {%- set html = include( "_site/menu.#{menuname}", { entry: entry, settings: settings }, ignoreMissing = true ) -%}
    {%- set html = html ? html : include( "_core/menu.#{menuname}", { entry: entry, settings: settings }, ignoreMissing = true ) -%}
    {%- set html = html ? html : _self._macro( 'menu', menuname, entry, settings ) -%}
    {{- html ? raw( html ) -}}
{% endmacro %}



{## Macro Chain Core
{------------------------------------------------------------------------------------ ##
    This macro is the brain of the assembly file. It is responsible for determining
    which macro to run (in which file) based on the provided arguments.

    First it checks `_site/<template>`, then `_core/<template>` for a macro matching
    the provided `macroname`. If no match is found, it check for a fallback
    `default()` macro (first in `_site`, then in `_core`).

    A `default()` or `<part>__default()` macro should always exist in the `_core`
    file for any element being assembled.

    For clarity, below is an unminified, unoptimized, pseudocode version of what this
    macro is doing -- just with better error handling.
{------------------------------------------------------------------------------------ ##
    {%- from '_site/element' import macroname as site__element__macroname,
                                    default   as site__element__default -%}

    {%- from '_core/element' import macroname as core__element__macroname,
                                    default   as core__element__default -%}

    {{- site__element__macroname(content,settings) ??
        core__element__default(  content,settings) ??
        site__element__macroname(content,settings) ??
        core__element__default(  content,settings) -}}
{-------------------------------------------------------------------------------------##}
{% macro _macro( template = null, macroname = null, content = null, settings = null ) -%}
    {%- set template = template ?? null -%}
    {%- set template = template is not null and template is not iterable
        ? template | replace('/[^\\w\.\:]+/', '') : null -%}

    {%- set macroname = macroname ?? null -%}
    {%- set macroname = macroname is not null and macroname is not iterable
        ? macroname | replace('/[^\\w]+/', '') : null -%}
    {# {%- set macroname = macroname ?? 'default' -%} #}

    {%- if template -%}

        {# if template is a compound name, split it into parts #}
        {%- set name = macroname -%}
        {%- set dflt = 'default' -%}
        {%- set fall = 'fallback' -%}
        {%- set parts = template | split(':') -%}
        {%- if parts | length > 1 -%}
            {%- set template = parts[0] -%}
            {%- set name = [ parts[1], name ] | join('__') -%}
            {%- set dflt = [ parts[1], dflt ] | join('__') -%}
            {%- set fall = [ parts[1], fall ] | join('__') -%}
        {%- endif %}

        {# localization #}
        {%- set temp_slug  = template | replace('/[^\\w]+/', '') -%}
        {%- set site_name  = "__site__#{temp_slug}__#{name}" | snake -%}
        {%- set site_dflt  = "__site__#{temp_slug}__#{dflt}" | snake -%}
        {%- set core_name  = "__core__#{temp_slug}__#{name}" | snake -%}
        {%- set core_fall  = "__core__#{temp_slug}__#{fall}" | snake -%}

        {%- set source_file   = template ends with '.twig' ? template : template ~ '.twig' -%}
        {%- set site__element = source( "_site/#{source_file}", ignore_missing = true ) -%}

        {# default macro in `_site/<template>` or fallback in `_core/<template>` #}
        {%- set template_string = site__element
            ? "{% from '_site/#{template}' import #{dflt} as #{site_dflt}  %}{% from '_core/#{template}' import #{fall} as #{core_fall} %}{{- #{site_dflt} is defined ? #{site_dflt}(c,s) : #{core_fall}(c,s) -}}"
            : "{% from '_core/#{template}' import #{fall} as #{core_fall} %}{{ #{core_fall}(c,s) }}" -%}

        {# named macro in `_site/<template>` or `_core/<template>`, fallback to `default`  #}
        {%- if name != dflt -%}
            {%- set template_string = site__element
                ? "{% from '_site/#{template}' import #{name} as #{site_name}, #{dflt} as #{site_dflt} %}{%
                      from '_core/#{template}' import #{name} as #{core_name}, #{fall} as #{core_fall} %}{{ #{site_name} is defined ? #{site_name}(c,s) : #{core_name} is defined ? #{core_name}(c,s) : #{site_dflt} is defined ? #{site_dflt}(c,s) : #{core_fall}(c,s) }}"
                : "{% from '_core/#{template}' import #{name} as #{core_name}, #{fall} as #{core_fall} %}{{ #{core_name} is defined ? #{core_name}(c,s) : #{core_fall}(c,s) }}"
            -%}
        {%- endif -%}

        {# run our macro #}
        {{- include( template_from_string( template_string ), { c: content, s: settings }, withContext = false ) -}}
    {%- endif -%}
{%- endmacro %}