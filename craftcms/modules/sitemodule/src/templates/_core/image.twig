{## Core Image Template
{---------------------------------------------------------------------------------------}
    Extending from an empty {% block %} makes it easier to keep things organized in here.
{-------------------------------------------------------------------------------------##}
{% extends template_from_string('{% block image__skeleton "" %}') %}


{## Template Variables
{-------------------------------------------------------------------------------------##}
{# one or more images to generate a tag for #}
{# {%- set images = images ??? image ??? null -%} #}
{%- set images = images ??? image ??? null -%}

{# caption text / html #}
{%- set caption = caption ??? null -%}

{# settings object #}
{%- set settings = settings ?? null is iterable ? settings : {} -%}

{# <figure> attributes - to use when generating tag with: `{{ tag('figure', attr ) }}` #}
{%- set figure = figure ??? settings.figure ??? null -%}
{%- set figure = figure ?? null is iterable ? figure : {} -%}


{## Default Configuration
{---------------------------------------------------------------------------------------}
{-------------------------------------------------------------------------------------##}
{% block img__class      img__class     ?? "w-full max-w-full h-auto" %}
{% block picture__tag    picture__tag   ?? "picture" %}
{% block picture__class  picture__class ?? "" %}
{% block figure__tag     figure__tag    ?? "figure" %}
{% block figure__class   figure__class  ?? "relative z-20" %}
{% block caption__tag    caption__tag   ?? "figcaption" %}
{% block caption__class  caption__class ?? "text-sm" %}

{% block image__action -%}
    {%- set settings = settings ?? null is iterable ? settings : {} -%}
    {%- set settings = { clickaction: 'none' } | merge( settings ) -%}

    {%- switch settings.clickaction -%}
        {%- case 'lightbox' -%}
            {{- _self.action__lightbox( images, settings ) -}}

        {%- case 'download' -%}
            {{- _self.action__download( images, settings ) -}}
        {%- case 'none' -%}

        {%- default -%}
            {{- _self.action__autolink( images, settings ) -}}
    {%- endswitch -%}
{%- endblock %}



{## Render HTML
{---------------------------------------------------------------------------------------}
    Used to generate the html structure surrounding an image (figure, caption, etc).
{-------------------------------------------------------------------------------------##}
{% block image__skeleton -%}
    {%- set figure = { class: settings.figureclass ?? block('figure__class') } | merge( figure ) -%}
    {% tag block('figure__tag') with figure %}
        {%- block figure -%}
            {%- block image -%}
                {%- tag block('picture__tag') with { class: block('picture__class') } -%}
                    {{ block('image__sources' ) }}
                    {%- set settings = { imgclass: block('img__class') } | merge( settings ) -%}
                    {%- block img -%}{{ imgtag ?? _self.imgtag( images, settings ) }}{% endblock %}
                {%- endtag -%}
            {%- endblock -%}

            {%- block caption ( caption )
                ? tag( block('caption__tag'), { class: block('caption__class'), html: caption } )
                : '' -%}
        {% endblock %}
        {{ block( 'image__action' ) }}
    {% endtag %}
{%- endblock %}


{% block image__sources -%}{%- endblock %}


{## Fallback Method
{---------------------------------------------------------------------------------------}
    Default image frame, and default image iterator. These are only used if no default
    frame or iterator exists in `_site/image` and/or no named frames or named iterators
    exist in `_site/image` or `_core/image`.

    While both accept (and pass-through) the `settings` object, it is typically not
    used within fallback methods inorder to remain as decoupled as possible.
{-------------------------------------------------------------------------------------##}
{%- macro fallback( images, settings ) -%}
    {{- include( ['_site/image', '_core/image'] ) -}}
{% endmacro %}


{## Widescreen / Video Aspect Frame (with Transform)
{-------------------------------------------------------------------------------------##}
{% macro widescreen( images, settings ) %}
    {%- set settings = settings ?? null is iterable ? settings : {} -%}

    {%- set settings = {
        transform: {
            mode: 'crop',
            width: 960,
            height: 540,
            position: 'center-center'
        }
    } | merge( settings ) -%}

    {%- import "_core" as assemble -%}
    {{- assemble.imagelayer( 'default', images, settings ) -}}
{%- endmacro %}


{## Square Frame (with Transform)
{-------------------------------------------------------------------------------------##}
{% macro square( images, settings ) %}
    {%- set settings = settings ?? null is iterable ? settings : {} -%}
    {%- set settings = {
        transform: {
            mode: 'crop',
            width: 960,
            height: 960,
            position: 'center-center'
        }
    } | merge( settings ) -%}

    {%- import "_core" as assemble -%}
    {{- assemble.imagelayer( 'default', images, settings ) -}}
{%- endmacro %}



{## Iterators
{---------------------------------------------------------------------------------------}
    These macros are used to generate a variety of layouts for multiple images.
{-------------------------------------------------------------------------------------##}
{% macro iterator__single( images, settings ) -%}
    {%- import "_core" as assemble -%}
    {{- assemble.imagelayer( settings.imagelayer ??? 'default', images, settings ) -}}
{%- endmacro %}


{## Random Single
{-------------------------------------------------------------------------------------##}
{% macro iterator__randomize( images, settings ) -%}
    {%- import "_core" as assemble -%}
    {{- assemble.imagelayer( settings.imagelayer ??? 'default', shuffle( images ), settings ) -}}
{%- endmacro %}



{## Two Column Grid
{---------------------------------------------------------------------------------------}
    Defaults to a single column if only one image is provided.
{-------------------------------------------------------------------------------------##}
{% macro iterator__grid2( images, settings ) -%}
    {%- set images   = images   ??? null and images   is iterable ? images   : [] -%}
    {%- set settings = settings ?? null is iterable ? settings : {} -%}

    {%- set limit = settings.limit ??? 100 %}

    {%- set settings = {
        gridlayout: ( images | length == 1 ) ? 'single' : 'flexible2',
        imagelayer: 'widescreen' }
    | merge( settings ) -%}

    {%- import "_core" as assemble -%}

    {%- set html = images[0:limit]
        | map( img => assemble.imagelayer( settings.imagelayer, img, settings ) )
        | join -%}

    {{- assemble.gridlayout( settings.gridlayout, html, settings ) -}}
{%- endmacro %}



{## Three Column Grid
{---------------------------------------------------------------------------------------}
    Defaults to `iterator__grid2` if fewer than 3 images provided.
{-------------------------------------------------------------------------------------##}
{% macro iterator__grid3( images, settings ) -%}
    {%- import "_core" as assemble -%}
    {%- set images = images ??? null and images is iterable ? images : [] -%}
    {%- set settings = settings ?? null is iterable ? settings : {} -%}
    {%- set limit = settings.limit ??? 100 -%}
    {%- set images = images[0:limit] -%}

    {%- if images | length >= 3 -%}
        {%- set settings = { gridlayout: 'fixed3', imagelayer: 'widescreen' } | merge( settings ) -%}
        {%- set imghtml = images | map( img => assemble.imagelayer( settings.imagelayer, img, settings ) ) | join -%}
        {{ assemble.gridlayout( settings.gridlayout, imghtml, settings ) }}
    {%- else -%}
        {{ assemble.images( 'grid2', images, settings ) }}
    {%- endif -%}
{%- endmacro %}


{## Simple Carousel
{-------------------------------------------------------------------------------------##}
{% macro iterator__carousel( images, settings = null ) -%}
{%- if images and images is iterable -%}
    {%- set settings = settings ?? null is iterable ? settings : {} -%}
    {%- set settings = {
        imgclass   : "object-cover object-center h-full w-full",
        figureclass: "h-full w-full relative z-10",
    } | merge( settings ) -%}

    {%- import "_core" as assemble -%}
    {{- include( ['_site/carousel', '_core/carousel'], {
        items: images | map( i => assemble.imagelayer( 'widescreen', i, settings ) ),
    } ) -}}
{%- endif -%}{%- endmacro %}



{## Simple Gallery
{---------------------------------------------------------------------------------------}
    AlpineJS powered gallery for multiple images. Should probably be moved to a
    dedicated template, but for now it's here.
{-------------------------------------------------------------------------------------##}
{% macro iterator__gallery( images, settings = null ) -%}
{%- if images and images is iterable -%}
    {%- set settings = settings ?? null is iterable ? settings : {} -%}
    {%- set imgcount = images | length -%}

    {%- set widescreen = {
        mode: 'crop',
        width: 960,
        height: 540,
        quality: 75,
        position: 'center-center'
    } -%}

    {%- set imgconfig = {
        transform: widescreen,
        figure: {
            class: 'aspect-video overflow-hidden rounded-lg relative cursor-pointer'
        },
    } -%}

    {# if we only have two images, just slam them into a carousel #}
    {% if imgcount == 2 %}
        {%- set images = images | map( i => _self.default( i,  ) ) -%}

        {% embed ['_site/carousel', '_core/carousel'] with {
            items: images,
        } only %}{% endembed %}
    {% else %}
        <div class="w-full flex flex-col gap-4" x-data="{
            switch( figure ) {
                this.$refs.feature.src = figure.querySelector('img').src
            }
        }">
            {# prepare the feature <img> tag #}
            <div class="w-full">
                {{- _self.imgtag( images|first, {
                    imgclass   : 'aspect-video w-full h-full object-cover',
                    figureclass: 'aspect-video overflow-hidden rounded-lg relative',
                    transform  : widescreen,
                }) | retconAttr( 'img', { 'x-ref': 'feature' } ) }}
            </div>

            {## For the Tailwind JIT compiler...
            {---------------------------------------------------------------------------------------}
                Since Tailwind won't find dynamically generated classes, we must manually list all
                possible options for `md:grid-cols-#{imgcount}` or risk something breaking:
             -> md:grid-cols-3  md:grid-cols-4  md:grid-cols-5
            {-------------------------------------------------------------------------------------##}
            {% if imgcount > 2 and imgcount < 6 %}
                {{ tag( 'div', {
                    class: "w-full grid-cols-3 md:grid-cols-#{imgcount} gap-4",
                    html : images | map( i => _self.default( i, imgconfig ) )
                }) }}
            {% endif %}

            {## Use a Carousel for more than 5 images ##}
            {% if imgcount > 5 %}
                {%- set images = images | map( i => _self.default( i, imgconfig ) ) -%}

                {% embed ['_site/carousel', '_core/carousel'] with {
                    items: images,
                } only %}
                    {% block splide__json %}{
                        type   : 'loop',
                        gap    : '1rem',
                        perPage: 4
                    }{% endblock %}
                {% endembed %}
            {% endif %}
        </div>
    {% endif %}
{%- endif -%}{%- endmacro %}


{## Image Action
{---------------------------------------------------------------------------------------}
    Generates the action for an image (lightbox, download, etc).
{-------------------------------------------------------------------------------------##}
{% macro action__autolink( image, settings ) -%}
    {%- if settings.autolink ??? null -%}
        {{ tag( 'a', {
            href : settings.autolink,
            class: 'click__cover',
            html : "<span class='sr-only'></span>",
        } ) }}
    {%- endif -%}
{%- endmacro %}


{% macro action__download( image, settings ) -%}
    {%- if image.url ??? null -%}
        {{ tag( 'a', {
            href : image.url,
            download: image.filename,
            target: '_blank',
            class: 'click__cover',
            html : "<span class='sr-only'>Download #{image.alt ?? 'Image'}</span>",
        } ) }}
    {%- endif -%}
{%- endmacro %}


{## Lightbox Modal
{---------------------------------------------------------------------------------------}
    Creates a modal window that will load on-click to show a larger version of the image.
{-------------------------------------------------------------------------------------##}
{% macro action__lightbox( image, settings ) -%}
    {%- set image = image ??? null -%}
    {%- set settings = settings ?? null is iterable ? settings : {} -%}

    {%- set lightbox = settings.lightbox ??? ["_site/modal", "_core/modal"] -%}
    {%- set content  = _self.imgtag( image, { imgclass: 'w-auto max-h-[70vh] mx-auto' } ) -%}

    {{ include( lightbox, { content: content, settings: settings }, withContext = false ) }}
{%- endmacro %}



{## <img> tag generator
{---------------------------------------------------------------------------------------}
    Generates a basic <img> tag for a variety of image sources. Also capable of
    generating multiple formats of placeholder images for wireframing and development.

    Valid formats for `imageinput` include:

  - A string containing a URL
  - An object with a `getUrl()` method (like a Craft `Asset` object)
  - An object with a `url` property (like a manually created Twig variable)
  - An array or ElementQuery containing any of any of the above.

    The `frame` object can be used to pass additional classes or transforms to the
    image tag. The following keys are accepted:

  - `frame.imgclass`  : Additional classes to apply to the <img> tag
  - `frame.transform` : The named Asset Transform or custom transform hash.
                        TODO: test if this actually allows inline transform hashes.

  -> https://craftcms.com/docs/5.x/development/image-transforms.html
{-------------------------------------------------------------------------------------##}
{% macro imgtag( imageinput, frame = null ) -%}

    {%- set imageinput = imageinput ?? null -%}

    {## your instinct might tell you to use a conditional statement here to skip the
        tag generation if we don't have any input, and maybe that's fine for production,
        but in development that would mean skipping placeholder generation. So....    ##}

    {%- set frame = frame ?? null is iterable ? frame : {} -%}
    {%- set frame = { imgclass: null, transform: null } | merge( frame ) -%}

    {## Only one image is allowed, so grab the first one we can find
    {---------------------------------------------------------------------------------##}
    {%- set image = null -%}

    {# an array of images (manual or eager loaded) OR an AssetQuery object. same same. #}
    {%- if image is null and ( imageinput[0] ??? null or imageinput.one() ??? null ) -%}

        {# passed an array of image urls strings? #}
        {%- set image = ( imageinput[0] ??? null) and (imageinput[0] is not iterable)
            ? { url: imageinput | first }
            : imageinput | first -%}
    {%- endif -%}

    {%- if image is null and imageinput ??? null and imageinput is not iterable -%}
        {%- set image = { url: imageinput } -%}
    {%- endif -%}

    {%- if image is null and imageinput.url ??? null -%}
        {%- set image = imageinput -%}
    {%- endif -%}

    {## Placeholder Image (no image found/provided)
    {-----------------------------------------------------------------------------------}
        If no image is found, we can generate a placeholder image to help with the
        layout. Disabled by default in `staging` and `production` environments, but very
        useful during wireframing and development.
    {---------------------------------------------------------------------------------##}
    {{- ( image is null ) ? _self.placeholder( frame ) -}}

    {## Local Assets
    {-----------------------------------------------------------------------------------}
        Handle the transform (if any) and generate that tag.
    {---------------------------------------------------------------------------------##}
    {%- if image ??? null and image.id ??? null -%}

        {% if frame.transform ??? null %}
            {{- tag( 'img', {
                src    : image.getUrl( frame.transform ),
                alt    : image.alt ?? image.title,
                width  : image.getWidth( frame.transform ),
                height : image.getHeight( frame.transform ),
                class  : frame.imgclass,
                loading: 'lazy'
            }) -}}
        {% else %}
            {{- tag( 'img', {
                src    : image.url ?? '',
                alt    : image.alt ?? image.title,
                width  : image.width,
                height : image.height,
                class  : frame.imgclass,
                loading: 'lazy'
            }) -}}
        {% endif %}

    {## External Image / URL String
    {-----------------------------------------------------------------------------------}
        Can't transform remote images, so just output them in the desired frame.

        Could queue them to be downloaded and turn them into local assets if we
        *really* wanted / needed to.
    {---------------------------------------------------------------------------------##}
    {%- elseif image is not null -%}

        {%- set show = ( image.url starts with '//' or image.url|lower starts with 'http' ) %}
        {{- show ? tag( 'img', {
            src    : image.url,
            alt    : image.alt ?? '',
            class  : frame.imgclass,
            loading: 'lazy'
        }) -}}

    {%- endif -%}
{%- endmacro %}





{## Placeholder Image Generator(s)
{---------------------------------------------------------------------------------------}
    Automatically disabled in `staging` and `production` environments.
{-------------------------------------------------------------------------------------##}
{% macro placeholder( settings ) -%}
{%- if getenv('CRAFT_ENVIRONMENT') == 'dev' -%}

    {%- set settings  = settings ?? null is iterable ? settings : {} -%}
    {%- set transform = settings.transform ??? null -%}

    {%- set width  = transform.width  ??? 900 -%}
    {%- set height = transform.height ??? 650 -%}

    {%- set type = settings._placeholder ??? 'default' -%}
    {%- set type = ( type == 'default' and transform and transform is not iterable ) ? transform : type -%}

    {%- set width  = type == 'widescreen' ? 900 : width  -%}
    {%- set height = type == 'widescreen' ? 506 : height -%}

    {%- set width  = type == 'square'     ? 900 : width  -%}
    {%- set height = type == 'square'     ? 900 : height -%}

    {%- set width  = type == 'skull'      ? 240 : width  -%}
    {%- set height = type == 'skull'      ? 240 : height -%}

    {%- set color = settings.color ??? '#475569' -%}
    {%- set color = color|replace({'#':''})   -%}

    {## Try to use the same image in the same places, by creating a unique seed.
        Optionally distort it (blur/grayscale) to help identify it as a placeholder. ##}
    {%- set seed   = [width, height, settings.slug ??? null, settings.loop.index ??? null] | filter | join('__') -%}
    {%- set source = "https://picsum.photos/seed/#{seed}/#{width}/#{height}" -%}
    {%- set source = source ~ "?grayscale&blur=4"-%}

    {# Use a different service for 'square' images #}
    {% set source = ( type == 'skull' )
        ? "https://placeskull.com/#{width}/#{height}/#{color}/#{random(1,24)}"
        : source %}

    {# Use local SVG files for icon placeholders #}
    {## TODO: Update this to use the new Craft 5 SVG Icon Library ##}

    {% if type == 'icon' %}
        {% set svgs = ['brick','calendar','cart','circle-error','circle-check','phone','star','widget'] %}
        {{ svg( '@webroot/static/svg/' ~ shuffle(svgs)|first ~'.svg') | attr({ class: 'fill-current h-20 w-20 mx-auto' }) }}

    {# Otherwise render placehold <img> #}
    {% else %}
        {{- tag( 'img', {
            src: source,
            alt: "Placeholder #{type|capitalize}",
            class: [ settings.imgclass ?? null, "placeholder__#{type}" ] | filter,
        } ) -}}
    {% endif %}
{%- endif %}{% endmacro %}


{#
Outputs an SVG to be used as an image placeholder, optionally including target dimensions.

@var width          int     Desired element width
@var height         int     Desired element height
@var showDimensions bool    Whether to display target dimensions (defaults to `true`)
@var fill           string  Background fill color (defaults to `'#D0D0D0'`)
#}
{# {% set showDimensions = showDimensions ?? true %}
{% set fill = fill ?? '#D0D0D0' %}
<svg class="{{ class ?? '' }}"
     xmlns="http://www.w3.org/2000/svg"
     width="{{ width }}"
     height="{{ height }}"
     viewBox="0 0 {{ width }} {{ height }}"
>
  <g clip-path="url(#clip0)">
    <rect fill="{{ fill }}" width="{{ width }}" height="{{ height }}"/>
    <line x1="0" y1="0" x2="{{ width }}" y2="{{ height }}" stroke="rgba(255,255,255,0.3)"/>
    <line x1="0" y1="{{ height }}" x2="{{ width }}" y2="0" stroke="rgba(255,255,255,0.3)"/>
  </g>
  <text fill="rgba(0,0,0,0.1)"
        font-family="ui-sans-serif,system-ui,-apple-system,sans-serif"
        font-size="16"
        dy="3%"
        font-weight="thin"
        x="50%"
        y="50%"
        text-anchor="middle"
  >
    {%- if showDimensions %}
      {{ width }} × {{ height }}
    {% endif -%}
  </text>
</svg> #}


{## --------------------------------------------------------------------------------- ##}